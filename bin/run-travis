#!/bin/sh
#
# Runs continuous integration tests, used by travis-ci.org

set -e

# Kill child processes on exit
cleanup() {
    local status="$?"
    local pids=$(jobs -p)
    [ -n "$pids" ] && kill $pids
    exit "$status"
}
trap "cleanup" INT TERM EXIT

FLAMBE_ROOT=`readlink -f $(dirname $0)/..`
FLAMBE_SPACE="/tmp/flambe space"

# Make sure the test directory has a space in it, so we can nip any issues around that in the bud
ln -sfT "$FLAMBE_ROOT" "$FLAMBE_SPACE"
cd "$FLAMBE_SPACE"

# Install the flambe command and library
haxelib install hxsl
haxelib install air3
haxelib dev flambe "$FLAMBE_SPACE/src"
npm install -g ./command

echo "Validating compilation..."
haxe -js none.js --no-output -lib flambe --macro 'include("flambe", true, ["flambe.platform"])'

echo "Running unit tests..."
# flambe-server required to run the unit tests
haxelib git flambe-server https://github.com/aduros/flambe-server master src
tests/unit/run-tests

echo "Building demos..."
git clone git://github.com/aduros/flambe-demos.git
haxelib install nape # Used by physics demo
flambe-demos/bin/build-all --debug

# Run the Selenium tests if the Sauce auth key is available (not in pull requests), and only run on
# one of the build workers
if [ "$TRAVIS_REPO_SLUG" = "aduros/flambe" ] && [ "$TRAVIS_SECURE_ENV_VARS" == "true" ] && [ "$TRAVIS_JOB_NUMBER" != "${TRAVIS_JOB_NUMBER/\.1/}" ]; then
    # Download and start Sauce Connect
    mkdir -p /tmp/sauce
    cd /tmp/sauce
    curl "http://saucelabs.com/downloads/Sauce-Connect-latest.zip" > connect.zip
    unzip connect.zip

    echo "Starting Sauce Connect..."
    java -jar Sauce-Connect.jar --readyfile "connect-ready" \
        --tunnel-identifier "$TRAVIS_JOB_NUMBER" \
        flambe "$SAUCE_ACCESS_KEY" > /dev/null &

    # Wait for Connect to be ready before continuing
    while [ ! -f "connect-ready" ]; do
        sleep 0.5
    done
    cd -

    echo "Building game to run on Sauce..."
    cd tests/selenium
    flambe build html --debug
    cd -

    # Serve the integration test app to be proxied over Connect
    echo "Starting web server..."
    cd tests/selenium/build/web
    python -m SimpleHTTPServer 5000 &> /dev/null &
    cd -

    echo "Running integration tests..."
    cd tests/selenium
    sudo pip install selenium nose --use-mirrors
    nosetests --processes=3 --process-timeout=600 -v driver.py
    cd -
fi
